<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on Let&#39;s go code, sryan&#39;s home</title>
    <link>http://gocode.cc/categories/cpp/</link>
    <description>Recent content in Cpp on Let&#39;s go code, sryan&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jun 2016 16:23:38 +0800</lastBuildDate>
    <atom:link href="http://gocode.cc/categories/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>初见 C&#43;&#43; lambda表达式</title>
      <link>http://gocode.cc/blog/2016/06/cpp-lambda-introduce/</link>
      <pubDate>Fri, 03 Jun 2016 16:23:38 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/06/cpp-lambda-introduce/</guid>
      <description>

&lt;h2 id=&#34;起因:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;今天想翻一翻有没有开源的冒险岛服务端源码，于是在github上找了找，java版本的很常见了，我以前也玩了会，还是很不错的，可惜很多任务都做不了，想回忆下童年貌似也很困难：（&lt;/p&gt;

&lt;p&gt;还翻到一个c++版本的，随便打开一个文件看了看，有点儿傻眼，这是c++写的？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Vana {
    class PacketReader;

    namespace ChannelServer {
        class WorldServerSession final : public PacketHandler, public enable_shared&amp;lt;WorldServerSession&amp;gt; {
            NONCOPYABLE(WorldServerSession);
        public:
            WorldServerSession() = default;
        protected:
            auto handle(PacketReader &amp;amp;reader) -&amp;gt; Result override;
            auto onConnect() -&amp;gt; void override;
            auto onDisconnect() -&amp;gt; void override;
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有点儿懵逼了，我开始怀疑我究竟会不会c++了。当然我还是有点儿印象的，我只知道auto这个东西貌似是在c++的新标准里引入的，那么-&amp;gt;这个应该也是新标准引入的吧，可是我的第一印象却是lambda表达式，这个和lambda表达式有什么关系呢？&lt;/p&gt;

&lt;h2 id=&#34;lambda表达式:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;Lambda表达式&lt;/h2&gt;

&lt;p&gt;lambda表达式是一个很有用的东西，我在c++外常用lua和golang，这两个都提供闭包支持，在写回调函数的时候非常方便。lambda就是类似于c++的闭包函数，用于在函数内定义匿名回调函数。&lt;/p&gt;

&lt;p&gt;lambda表达式的基本格式为(&amp;lt;&amp;gt;内的为说明 不包含该符号)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;import variables&amp;gt;](&amp;lt;parameters&amp;gt;)-&amp;gt;&amp;lt;return type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;import-variables:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;import variables&lt;/h3&gt;

&lt;p&gt;闭包函数的一个重要特性就是可以获取函数外的变量，在golang和lua中是保持着长久的引用，不会因为函数退出堆栈改变而受到影响。&lt;/p&gt;

&lt;p&gt;c++则不是，引用的变量假如是引用方式引入的，那么当写lambda表达式的函数结束后，那引入的变量已经是有问题的了。&lt;/p&gt;

&lt;p&gt;c++支持值和引用方式传入变量。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当写为[]时，则为不引入任何的变量&lt;/li&gt;
&lt;li&gt;当写为[=]时，通过值复制方式引入所有的外部自动变量(栈上变量)&lt;/li&gt;
&lt;li&gt;当写为[&amp;amp;]时,通过引用方式传入所有的外部自动变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一个特殊的地方就是传入this的引用，按规则是除了[]之外，默认都会传入this的拷贝。&lt;/p&gt;

&lt;p&gt;另外，还可以指定特定变量的引入方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int var = 0;
[var]()-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则为通过值复制的方式引入了外部变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int var = 0;
[&amp;amp;var]()-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则为通过引用方式引入了外部变量。&lt;/p&gt;

&lt;p&gt;引用外部变量，默认情况下是禁止修改外部变量的。可以通过指定mutable关键字来修改外部变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// version 1
int var = 0;
[var]()mutable-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);++var;}();

// version 2
int var = 0;
[&amp;amp;var]()mutable-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);++var;}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面两种写法都可以，只是通过传引用方式传入的变量，会在version 2中被修改。&lt;/p&gt;

&lt;h3 id=&#34;parameters:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;parameters&lt;/h3&gt;

&lt;p&gt;这个就没有什么好讲的了，只是指定参数而已，和普通的函数定义没有什么两样。&lt;/p&gt;

&lt;h3 id=&#34;return-type:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;return type&lt;/h3&gt;

&lt;p&gt;这个也没什么好说的，指定返回的类型而已。&lt;/p&gt;

&lt;h3 id=&#34;简化:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;简化&lt;/h3&gt;

&lt;p&gt;当然上面的写法是完整的写法，实际上假设有一些东西没用到，可以简化。比如假设我们没有返回类型，亦或者是希望编译器自己推导返回类型，我们可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[](){printf(&amp;quot;func\n&amp;quot;);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functional:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;functional&lt;/h2&gt;

&lt;p&gt;我们可以将lambda表达式赋值给function对象，然后我们可以使用function对象来当做函数指针进行调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;

std::function&amp;lt;int(int, const char*)&amp;gt; func = [](int cnt, const char* pMsg)-&amp;gt;int{for(int i = 0; i &amp;lt; cnt; ++i){printf(&amp;quot;%s\n&amp;quot;, pMsg);}return cnt + 1;};
func(3, &amp;quot;hello function&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单的来说，就是return type(arg type, arg type &amp;hellip;)这样的形式。&lt;/p&gt;

&lt;h2 id=&#34;总结:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;回到开头，开头那个令我懵逼的写法，就是仿照lambda表达式的写法，用auto作为占位符，然后后面则是-&amp;gt; return type。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>将__LINE__宏格式化成字符串常量类型</title>
      <link>http://gocode.cc/blog/2016/05/format-__LINE__-to-string-type/</link>
      <pubDate>Fri, 27 May 2016 15:52:05 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/format-__LINE__-to-string-type/</guid>
      <description>

&lt;h2 id=&#34;使用宏的方式来格式化行号:684cd3e999a27e929f0e9a5c076982c3&#34;&gt;使用宏的方式来格式化行号&lt;/h2&gt;

&lt;p&gt;我们已经知道，我们可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__LINE__ 获得当前的行号
__FILE__ 获得当前的文件名
__FUNCTION__ 获得当前的函数名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些在打印日志的时候十分常用，所以在打印日志的时候我们常常需要序列化这些东西，然而序列化这些信息，特别是行号是整型，是有点儿消耗的。&lt;/p&gt;

&lt;p&gt;今天偶然发现了将行号直接格式化成字符串常量的方法，下面贴代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define __LINESTR__ TOSTRING(__LINE__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用这些代码即可将行号格式化成字符串。为了更好的使用，我们可以格式化更加复杂的信息，将文件行号和函数一起格式化成常量。（vc支持，gcc编译器不支持）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define __WHERE__ __FILE__&amp;quot;:&amp;quot;__LINESTR__&amp;quot; &amp;quot;__FILE__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc编译器不支持，因为gcc在拼接字符串的时候，结果必须是已定义的常量，比如文件，行号，字符串常量等，vc没问题。这样日志获得相信文件信息只需要使用上面的宏就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dll链接静态库的坑(LuaSQL fetch崩溃)</title>
      <link>http://gocode.cc/blog/2016/05/lib-and-dll-link-problem/</link>
      <pubDate>Tue, 10 May 2016 19:57:15 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/lib-and-dll-link-problem/</guid>
      <description>

&lt;h2 id=&#34;踩到一个大坑:0cf863c2eef47ef400d1b952311cfe50&#34;&gt;踩到一个大坑&lt;/h2&gt;

&lt;p&gt;　这几天在做我们数据中间件的自动化测试工具，我选择了Lua来做testcase的脚本。前一段日子有个需求，就是windows下全部使用静态库，代码生成全部使用/MT，免得依赖VC的运行时库。&lt;/p&gt;

&lt;p&gt;　所以我在开工测试工具的时候，也想这么搞，之前lua的协程调度、唤醒功能也都实现OK了，感觉没啥问题了，于是今天开始嵌入LuaSQL来做SQL的接口，于是问题来了。&lt;/p&gt;

&lt;p&gt;　采用默认的方式编译LuaSQL，当然链接的是Lua的静态库，编译出来的是Lua可以require的Dll。然后基本的使用是没问题的，然而当执行到select语句返回的结果集后，采用内置的cursor:fetch({}, &amp;ldquo;a&amp;rdquo;)就崩了，因为是开源的，所以果断断点调试，发现每次执行lua_rawset就崩了。&lt;/p&gt;

&lt;p&gt;　这是相当奇怪的一个错误，于是我在程序中写了个函数，处理lua传入的table参数，再次执行rawset，毫无问题。但是在LuaSQL模块中，每次操作lua脚本传入的table，执行rawset，必挂。于是我基本一下午都掉进这个坑里了。&lt;/p&gt;

&lt;p&gt;　网上貌似也有遇到这个情况的，但是他绕过了，采用了fetch()传空参数的方法来返回每列的结果。这没有从根本上解决问题，于是发现每次执行到某个指针变量和某个全局的静态变量比较的时候，比较出了问题，于是下面的逻辑就乱了，也就崩溃了。&lt;/p&gt;

&lt;p&gt;　一个劲儿的调试也不是出路。于是仔细思考了下，突然发现程序是静态链接的lua，而luasql也是静态链接的lua，而exe模块和dll模块最大的忌讳就是共享全局变量！因为exe中会有一份静态链接库的代码导入，而dll也会有，这就造成了exe和dll都有一份代码拷贝，而在exe中执行的lua函数均是exe模块里面的，而dll中则是dll模块中的lua模块，然而我exe中执行的脚本生成的table，放到了dll模块中的lua模块进行操作，很有可能会出现问题。&lt;/p&gt;

&lt;p&gt;　所以必须记住，对于dll和exe共享的模块，尽量动态链接，这样exe和dll执行后都会引用到对应的dll模块，不会产生多份代码拷贝，因为dll载入后有自己的内存空间等，和exe模块其实不属于一个模块。同时还有个题外话，就是dll中malloc/new出来的指针，必须在dll中导出对应的函数进行free/delete，这也是exe和dll中c库在执行释放操作的时候，由于模块不同，会导致无法释放对应指针，当然假如使用的是/MD选项的话，则不存在这个问题。&lt;/p&gt;

&lt;p&gt;　有朋友总结了一句话&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;一个模块一个堆，一个线程一个栈。
dll里malloc的内存，在exe里free会出错。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　总之，上述的问题，也是不同模块不同的代码副本造成的，不同模块引用了不同的全局变量，当然会出错啦。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>