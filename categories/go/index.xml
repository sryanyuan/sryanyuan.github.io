<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Let&#39;s go code, sryan&#39;s home</title>
    <link>http://gocode.cc/categories/go/</link>
    <description>Recent content in Go on Let&#39;s go code, sryan&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 May 2016 17:12:51 +0800</lastBuildDate>
    <atom:link href="http://gocode.cc/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用Go写一个简单的TCP server or client 模型</title>
      <link>http://gocode.cc/blog/2016/05/write-a-simple-tcp-server-and-client/</link>
      <pubDate>Fri, 27 May 2016 17:12:51 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/write-a-simple-tcp-server-and-client/</guid>
      <description>

&lt;h2 id=&#34;用go写一个简单的tcp-server-or-client-模型:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;用Go写一个简单的TCP server or client 模型&lt;/h2&gt;

&lt;h3 id=&#34;对conn封装的基本思路:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;对Conn封装的基本思路&lt;/h3&gt;

&lt;p&gt;go内置了net包已经很好的封装了socket通讯。然而在实际使用中，由于net/Conn的Read/Write方法是堵塞的原因，必须将其放入单独的goroutine中进行处理。&lt;/p&gt;

&lt;p&gt;我们先简单的整理下思路，对于连接(Conn)的处理，我们可以开启2条goroutine进行处理，一条用于堵塞的Read的处理，另一条进行Write的处理。&lt;/p&gt;

&lt;p&gt;这里必须指出，其实Write本身就是线程安全的，也就是我们在别的任何地方都可以进行Write，但是Write是堵塞的，所以考虑到这点，我们还是将其放入一个单独的goroutine中进行处理。&lt;/p&gt;

&lt;p&gt;这样设计的原因在于Conn是支持同时Read/Write的，这样我们的基本的Conn的模型就成型了。对于服务端或者客户端而言，我们只需要封装对应过来的Conn即可，Conn的读写goroutine进行处理，并将获得的事件抛向外部。&lt;/p&gt;

&lt;p&gt;那么我们就按这个思路来实现一个简单的Connection封装，该封装支持线程安全的写，并且支持解包操作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package tcpnetwork

import (
    &amp;quot;errors&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net&amp;quot;
    &amp;quot;time&amp;quot;
)

const (
    kConnStatus_None = iota
    kConnStatus_Connected
    kConnStatus_Disconnected
)

const (
    kConnEvent_None = iota
    kConnEvent_Connected
    kConnEvent_Disconnected
    kConnEvent_Data
    kConnEvent_Close
)

const (
    kConnConf_DefaultSendTimeoutSec = 5
    kConnConf_MaxReadBufferLength   = 0xffff // 0xffff
)

type Connection struct {
    conn                net.Conn
    status              int
    connId              int
    sendMsgQueue        chan []byte
    sendTimeoutSec      int
    eventQueue          IEventQueue
    streamProtocol      IStreamProtocol
    maxReadBufferLength int
    userdata            interface{}
    from                int
    readTimeoutSec      int
}

func newConnection(c net.Conn, sendBufferSize int, eq IEventQueue) *Connection {
    return &amp;amp;Connection{
        conn:                c,
        status:              kConnStatus_None,
        connId:              0,
        sendMsgQueue:        make(chan []byte, sendBufferSize),
        sendTimeoutSec:      kConnConf_DefaultSendTimeoutSec,
        maxReadBufferLength: kConnConf_MaxReadBufferLength,
        eventQueue:          eq,
    }
}

type ConnEvent struct {
    EventType int
    Conn      *Connection
    Data      []byte
}

func newConnEvent(et int, c *Connection, d []byte) *ConnEvent {
    return &amp;amp;ConnEvent{
        EventType: et,
        Conn:      c,
        Data:      d,
    }
}

//  directly close, packages in queue will not be sent
func (this *Connection) close() {
    if kConnStatus_Connected != this.status {
        return
    }

    this.conn.Close()
    this.status = kConnStatus_Disconnected
}

func (this *Connection) Close() {
    if this.status != kConnStatus_Connected {
        return
    }

    select {
    case this.sendMsgQueue &amp;lt;- nil:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

func (this *Connection) pushEvent(et int, d []byte) {
    if nil == this.eventQueue {
        log.Println(&amp;quot;Nil event queue&amp;quot;)
        return
    }
    this.eventQueue.Push(newConnEvent(et, this, d))
}

func (this *Connection) GetStatus() int {
    return this.status
}

func (this *Connection) setStatus(stat int) {
    this.status = stat
}

func (this *Connection) GetConnId() int {
    return this.connId
}

func (this *Connection) SetConnId(id int) {
    this.connId = id
}

func (this *Connection) GetUserdata() interface{} {
    return this.userdata
}

func (this *Connection) SetUserdata(ud interface{}) {
    this.userdata = ud
}

func (this *Connection) SetReadTimeoutSec(sec int) {
    this.readTimeoutSec = sec
}

func (this *Connection) GetReadTimeoutSec() int {
    return this.readTimeoutSec
}

func (this *Connection) setStreamProtocol(sp IStreamProtocol) {
    this.streamProtocol = sp
}

func (this *Connection) sendRaw(msg []byte) {
    if this.status != kConnStatus_Connected {
        return
    }

    select {
    case this.sendMsgQueue &amp;lt;- msg:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

func (this *Connection) Send(msg []byte, cpy bool) {
    if this.status != kConnStatus_Connected {
        return
    }

    buf := msg
    if cpy {
        msgCopy := make([]byte, len(msg))
        copy(msgCopy, msg)
        buf = msgCopy
    }

    select {
    case this.sendMsgQueue &amp;lt;- buf:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

//  run a routine to process the connection
func (this *Connection) run() {
    go this.routineMain()
}

func (this *Connection) routineMain() {
    defer func() {
        //  routine end
        log.Printf(&amp;quot;Routine of connection[%d] quit&amp;quot;, this.connId)
        e := recover()
        if e != nil {
            log.Println(&amp;quot;Panic:&amp;quot;, e)
        }

        //  close the connection
        this.close()

        //  free channel
        close(this.sendMsgQueue)
        this.sendMsgQueue = nil

        //  post event
        this.pushEvent(kConnEvent_Disconnected, nil)
    }()

    if nil == this.streamProtocol {
        log.Println(&amp;quot;Nil stream protocol&amp;quot;)
        return
    }
    this.streamProtocol.Init()

    //  connected
    this.pushEvent(kConnEvent_Connected, nil)
    this.status = kConnStatus_Connected

    go this.routineSend()
    this.routineRead()
}

func (this *Connection) routineSend() error {
    defer func() {
        log.Println(&amp;quot;Connection&amp;quot;, this.connId, &amp;quot; send loop return&amp;quot;)
    }()

    for {
        select {
        case evt, ok := &amp;lt;-this.sendMsgQueue:
            {
                if !ok {
                    //  channel closed, quit
                    return nil
                }

                if nil == evt {
                    log.Println(&amp;quot;User disconnect&amp;quot;)
                    this.close()
                    return nil
                }

                var err error

                headerBytes := this.streamProtocol.SerializeHeader(evt)
                if nil != headerBytes {
                    //  write header first
                    _, err = this.conn.Write(headerBytes)
                    if err != nil {
                        log.Println(&amp;quot;Conn write error:&amp;quot;, err)
                        return err
                    }
                }

                _, err = this.conn.Write(evt)
                if err != nil {
                    log.Println(&amp;quot;Conn write error:&amp;quot;, err)
                    return err
                }
            }
        }
    }

    return nil
}

func (this *Connection) routineRead() error {
    //  default buffer
    buf := make([]byte, this.maxReadBufferLength)

    for {
        msg, err := this.unpack(buf)
        if err != nil {
            log.Println(&amp;quot;Conn read error:&amp;quot;, err)
            return err
        }

        this.pushEvent(kConnEvent_Data, msg)
    }

    return nil
}

func (this *Connection) unpack(buf []byte) ([]byte, error) {
    //  read head
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
    }
    headBuf := buf[:this.streamProtocol.GetHeaderLength()]
    _, err := this.conn.Read(headBuf)
    if err != nil {
        return nil, err
    }

    //  check length
    packetLength := this.streamProtocol.UnserializeHeader(headBuf)
    if packetLength &amp;gt; this.maxReadBufferLength ||
        0 == packetLength {
        return nil, errors.New(&amp;quot;The stream data is too long&amp;quot;)
    }

    //  read body
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
    }
    bodyLength := packetLength - this.streamProtocol.GetHeaderLength()
    _, err = this.conn.Read(buf[:bodyLength])
    if err != nil {
        return nil, err
    }

    //  ok
    msg := make([]byte, bodyLength)
    copy(msg, buf[:bodyLength])
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Time{})
    }

    return msg, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是简单的Conn封装，在抛出事件这部，定义了一个interface来接收事件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package tcpnetwork

type IEventQueue interface {
    Push(*ConnEvent)
    Pop() *ConnEvent
}

type IStreamProtocol interface {
    //  Init
    Init()
    //  get the header length of the stream
    GetHeaderLength() int
    //  read the header length of the stream
    UnserializeHeader([]byte) int
    //  format header
    SerializeHeader([]byte) []byte
}

type IEventHandler interface {
    OnConnected(evt *ConnEvent)
    OnDisconnected(evt *ConnEvent)
    OnRecv(evt *ConnEvent)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们只要在实现对应的方法，就可以接收事件和读取事件了。&lt;/p&gt;

&lt;h3 id=&#34;server-client-端的实现:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Server/Client 端的实现&lt;/h3&gt;

&lt;h4 id=&#34;server:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;我们已经封装好了Conn，那么接下来的工作将会简单很多。我们来封装一个TCPNetwork的结构。&lt;/p&gt;

&lt;p&gt;对于Server端来说，它基本的步骤就是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;监听端口&lt;/li&gt;
&lt;li&gt;开启accept线程&lt;/li&gt;
&lt;li&gt;得到Conn，并生成Connection，开启Read/Write线程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一步很简单，net包已封装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls, err := net.Listen(&amp;quot;tcp&amp;quot;, addr)
if nil != err {
    return err
}

//  accept
this.listener = ls
go this.acceptRoutine()
return nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在listen成功后，开启了一个goroutine来不断的进行死循环来等待连接的接入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) acceptRoutine() {
    for {
        conn, err := this.listener.Accept()
        if err != nil {
            log.Println(&amp;quot;accept routine quit.error:&amp;quot;, err)
            return
        }

        //  process conn event
        connection := this.createConn(conn)
        connection.SetReadTimeoutSec(this.readTimeoutSec)
        connection.from = 0
        connection.run()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了Connection后，我们只需要让它的处理routine跑起来即可。然而我们需要对应的Connection抛过来的事件，于是我们在TCPNetwork中实现IEventQueue的2个方法，这样我们的TCPNetwork就可以接收对应的事件的抛入，也可以读取，大家读到这里也就知道了，最适合实现这个的就是golang的神器：channel。&lt;/p&gt;

&lt;p&gt;我们来为TCPNetwork定义一个chan *ConnEvent，并实现接口的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) Push(evt *ConnEvent) {
    if nil == this.eventQueue {
        return
    }
    this.eventQueue &amp;lt;- evt
}

func (this *TCPNetwork) Pop() *ConnEvent {
    evt, ok := &amp;lt;-this.eventQueue
    if !ok {
        //  event queue already closed
        this.eventQueue = nil
        return nil
    }

    return evt
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实基本的逻辑已经完成了，对于我们来说，只需要关心eventQueue里的内容就行了，这就属于上层逻辑处理了。这样一个简单的TCPNetwork就封装好了。&lt;/p&gt;

&lt;h4 id=&#34;client:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;Client端基本没什么好说的，net包Connect成功后会获得一个Conn，然后对于这个Conn的处理其实和Server端一样了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) Connect(addr string) error {
    conn, err := net.Dial(&amp;quot;tcp&amp;quot;, addr)
    if nil != err {
        return err
    }

    connection := this.createConn(conn)
    connection.from = 1
    connection.run()

    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用方法:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;使用方法&lt;/h4&gt;

&lt;p&gt;对于外部来说，使用很简单，这里贴上一个简单的echo server example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/sryanyuan/tcpnetwork&amp;quot;
)

type TSShutdown struct {
    network *tcpnetwork.TCPNetwork
}

func NewTSShutdown() *TSShutdown {
    t := &amp;amp;TSShutdown{}
    t.network = tcpnetwork.NewTCPNetwork(1024, tcpnetwork.NewStreamProtocol4())
    return t
}

func (this *TSShutdown) OnConnected(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;connected &amp;quot;, evt.Conn.GetConnId())
}

func (this *TSShutdown) OnDisconnected(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;disconnected &amp;quot;, evt.Conn.GetConnId())
}

func (this *TSShutdown) OnRecv(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;recv &amp;quot;, evt.Conn.GetConnId(), evt.Data)

    evt.Conn.Send(evt.Data, false)
}

func (this *TSShutdown) Run() {
    err := this.network.Listen(&amp;quot;127.0.0.1:2222&amp;quot;)

    if err != nil {
        log.Println(err)
        return
    }

    this.network.ServeWithHandler(this)
    log.Println(&amp;quot;done&amp;quot;)
}


package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
)

func main() {
    defer func() {
        e := recover()
        if e != nil {
            log.Println(e)
        }
        var inp int
        fmt.Scanln(&amp;amp;inp)
    }()
    tsshutdown := NewTSShutdown()
    tsshutdown.Run()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;我们其实已经实现了一个简单的tcp封装了，支持server/client连接，至于其中心跳的细节、封包解包的细节等等，这里就不多介绍了，可以通过阅读源码来理解。&lt;/p&gt;

&lt;p&gt;该封装可以见我的Github &lt;a href=&#34;https://github.com/sryanyuan/tcpnetwork&#34;&gt;TCPNetwork&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>