<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Let&#39;s go code, sryan&#39;s home</title>
    <link>http://gocode.cc/blog/</link>
    <description>Recent content in Blogs on Let&#39;s go code, sryan&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jun 2016 11:52:40 +0800</lastBuildDate>
    <atom:link href="http://gocode.cc/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git使用心得</title>
      <link>http://gocode.cc/blog/2016/06/git-experience/</link>
      <pubDate>Tue, 14 Jun 2016 11:52:40 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/06/git-experience/</guid>
      <description>

&lt;p&gt;在刚工作的时候，肯定要接触到版本控制系统，版本控制系统对于大型项目的开发还是很重要的。&lt;/p&gt;

&lt;p&gt;毕业工作后，第一个接触的版本控制系统就是svn，这个使用也的确简单，不过用的是图形化的软件，只是点点什么的，使用起来很方便。由于svn的限制，不能本地离线的commit。&lt;/p&gt;

&lt;p&gt;后来移动项目逐步迁移到了git上，那时候接触git。从svn转到git还是非常不适应的，变化很大，而且感觉git很不好用，那时候的想法是比svn差多了。于是开始用sourcetree的图形化软件来操作git。那时候一个人负责一个项目，于是平时也就是add，commit，push之类的，使用起来也没碰到什么问题。&lt;/p&gt;

&lt;p&gt;换了新环境后，还是用的git，而且多人负责一个项目，conflict的场景就出现了。于是那时候查了很多资料，觉得git是个好东西，只是入门有点儿痛苦，于是那时候干脆放弃sourcetree，开始全部用命令行版本来进行操作，现在想来是个明确的决定。&lt;/p&gt;

&lt;p&gt;用熟悉了git后，感觉git真是个好东西，还能支持本地仓库的版本管理，于是自己开发的项目全部用这个来管理了，再也不用复制粘贴，每次更新了后怕出问题找不到问题。&lt;/p&gt;

&lt;p&gt;下面我就按我熟悉命令的时间段来以我个人的观点来记录下常用的git命令吧，当然肯定不会非常正确，而且使用场景也只是简单的场景，复杂的参数我这儿也不涉及，只是涉及到常用的一些参数，只是我的想法而已，欢迎拍砖。&lt;/p&gt;

&lt;h2 id=&#34;工作区-暂存区-本地仓库:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;工作区 暂存区 本地仓库&lt;/h2&gt;

&lt;p&gt;工作区就是我们操作修改的文件，可见&lt;/p&gt;

&lt;p&gt;暂存区就是将修改提交的某个临时区域&lt;/p&gt;

&lt;p&gt;本地仓库就是我们最终commit到的地方，这个仓库可以和远程仓库进行提交或者拉取&lt;/p&gt;

&lt;h2 id=&#34;git-clone:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git clone&lt;/h2&gt;

&lt;p&gt;克隆一个远程的git仓库到本地，并且创建本地的仓库与远程仓库进行关联，简单的说就是clone后，你就可以在commit到本地的仓库并且push到远程仓库了。&lt;/p&gt;

&lt;h2 id=&#34;git-branch:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git branch&lt;/h2&gt;

&lt;p&gt;查看当前git仓库的分支，列一下常用的一些参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git branch -a 常看所有的分支，包括本地和远程的&lt;/li&gt;
&lt;li&gt;git branch -vv 可以查看本地分支是否关联到了远程分支&lt;/li&gt;
&lt;li&gt;git branch 无参数，查看本地分支&lt;/li&gt;
&lt;li&gt;git branch -d &lt;branch-name&gt; 删除某个分支&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-checkout:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git checkout&lt;/h2&gt;

&lt;p&gt;这是一个很常用的命令，对于不同的参数也有不同的处理方法，比较复杂，但是也非常的常用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git checkout &lt;branch-name&gt;&lt;/p&gt;

&lt;p&gt;可以在不同的分支之间进行切换，参数跟的是分支名&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git checkout &lt;file-name&gt;&lt;/p&gt;

&lt;p&gt;可以恢复文件到工作区中。这个恢复是从暂存区中恢复的，也就是你提交了某个文件到了暂存区，然后又对这个文件进行了修改，然后进行checkout操作，那么你将会回滚到暂存区中的文件内容，而你没有存到暂存区中，checkout则直接恢复到本地仓库中的内容。当然你假如希望跳过暂存区直接恢复到原始内容，请使用git checkout HEAD &lt;file-name&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git checkout -b &lt;new-branch-name&gt; &lt;remote-branch&gt;&lt;/p&gt;

&lt;p&gt;创建一个新的分支，并且将新的分支和远程分支进行跟踪关联。当你忽略remote-branch的时候，则是从当前分支拷贝一个副本作为分支，不跟踪任何远程分支。&lt;/p&gt;

&lt;p&gt;这个使用也很多，开发某个版本的时候，创建一个本地分支来进行开发，然后将这个本地分支merge到当前的分支下，再进行提交，这个是常用的开发步骤。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-rm:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git rm&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git rm &lt;file-name&gt;&lt;/p&gt;

&lt;p&gt;删除一个版本跟踪的文件，并且提交到暂存区&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-reset:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git reset&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git reset &lt;file-name&gt;&lt;/p&gt;

&lt;p&gt;丢弃暂存区中的某个文件，不会影响工作区的内容&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-status:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git status&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git status&lt;/p&gt;

&lt;p&gt;查看当前git仓库的状态，修改的文件，新增的文件，版本是否最新等等&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-commit:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git commit&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git commit&lt;/p&gt;

&lt;p&gt;提交到本地分支上&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-push:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git push&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git push&lt;/p&gt;

&lt;p&gt;提交到远程git仓库上，默认是当前分支跟踪的远程分支，可以指定远程分支&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-pull:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git pull&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git pull&lt;/p&gt;

&lt;p&gt;拉取最新远程仓库的内容到本地仓库中，会影响本地仓库，工作区，并自动进行合并，有可能有冲突，无法自动解决冲突的话，必须手动解决并且提交。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-merge:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git merge&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git merge &lt;branch-name&gt;&lt;/p&gt;

&lt;p&gt;将branch-name的分支合并到当前的分支上&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-fetch:cad5a73596f1cce9a9eb82d90fa794f2&#34;&gt;git fetch&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git fetch &lt;repository-name&gt; &lt;branch-name&gt; : &lt;local-branch-name&gt;&lt;/p&gt;

&lt;p&gt;这是一个比较复杂的命令，这里有几个基本的用法。&lt;/p&gt;

&lt;p&gt;git fetch origin dev&lt;/p&gt;

&lt;p&gt;拉取origin dev的最新的内容到本地，应该是作为分支存在的，但是用branch命令是无法查看到的，但是可以通过origin/dev来访问。于是我们在执行了这个命令后，我们可以使用&lt;/p&gt;

&lt;p&gt;git diff origin/dev来查看哪些文件被修改了，确定好后，我们就可以使用 git mergy origin/dev来把最新的分支合并到当前分支上了&lt;/p&gt;

&lt;p&gt;git fetch origin dev:temp&lt;/p&gt;

&lt;p&gt;这个比较好理解，就是上面的origin/dev分支变成了temp分支，就是远程最新的内容了，我们就可以执行合并什么的操作，然后可以branch -d来把这个分支给删除了。&lt;/p&gt;

&lt;p&gt;总结一下就是不加local branch就是生成了一个系统的分支，隐形的（待考证），我们可以将这个当做分支来进行操作&lt;/p&gt;

&lt;p&gt;git fetch + git merge = git pull&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>没有开始的结局或许是最好的结局</title>
      <link>http://gocode.cc/blog/2016/06/a-end-without-begin-is-a-happy-ending/</link>
      <pubDate>Tue, 07 Jun 2016 23:34:19 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/06/a-end-without-begin-is-a-happy-ending/</guid>
      <description>&lt;p&gt;现在已经很晚了，但是我还是想写点东西，因为好久没有过这种状态了。&lt;/p&gt;

&lt;p&gt;这种状态是一种疯狂的状态，让我想起了大学，或许只有年少轻狂的我才会有那种疯狂吧。其实还是很怀念那时候的疯狂，即使是失败了，也感受到自己是活着的。&lt;/p&gt;

&lt;p&gt;毕业四年了，我貌似没有喜欢过，或者再次对对方有强烈的好感过了。也不知道自己是什么口味，对于美女没啥兴趣，可是对一部分眼睛妹子特别有好感，即使是上了年纪的，我也不知道自己怎么了。。。&lt;/p&gt;

&lt;p&gt;从去年开始吧，也相亲了好多次了，也尝试了谈了谈，然而都是没啥结果，当然提出分开也没什么感觉，弄得我到上周之前都觉得自己是不是没感情了。&lt;/p&gt;

&lt;p&gt;于是上周日继续去相亲了，也不抱什么希望，就是想着给自己多个机会吧。对方先来的，挪车的时候我看了下，饿。。。心仪的妹子，可是怎么那么高！！！于是下了车后我就对自己说，没戏了吧，对的，没戏了。&lt;/p&gt;

&lt;p&gt;相亲过程只是无聊的相同的步骤，然后大家散了。&lt;/p&gt;

&lt;p&gt;回到家，试探着聊了聊，没想到对方还是很开朗的，主动说了好多话，突然感觉貌似有戏，也确实从聊天过程中感觉应该有机会，于是打算第二天试着聊天并在端午约出来。&lt;/p&gt;

&lt;p&gt;第二天，试着问候了下，没回应。。。隐约感觉不对劲了。&lt;/p&gt;

&lt;p&gt;第三天下班，再次发了条信息，等了好久终于有了回复，意思就是不想继续谈下去了。&lt;/p&gt;

&lt;p&gt;然后我就蒙蔽了，到现在都是恍惚的状态。&lt;/p&gt;

&lt;p&gt;这是一个不正常的状态，我貌似很久很久没有这种状态了，真的，突然很伤心，也许这伤心，是由于有了希望，才会带来的。&lt;/p&gt;

&lt;p&gt;有了希望，也就有了失望。没有希望，就不存在失望之说。&lt;/p&gt;

&lt;p&gt;虽然现在还是有点儿不舒服，但也是好事，拖得时间久了，那么更加伤心，这种事儿就别强求了，没啥好结果。&lt;/p&gt;

&lt;p&gt;虽然不是好结果，但是我还是笑了。&lt;/p&gt;

&lt;p&gt;原来，我还是个有感情的正常人：）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>初见 C&#43;&#43; lambda表达式</title>
      <link>http://gocode.cc/blog/2016/06/cpp-lambda-introduce/</link>
      <pubDate>Fri, 03 Jun 2016 16:23:38 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/06/cpp-lambda-introduce/</guid>
      <description>

&lt;h2 id=&#34;起因:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;今天想翻一翻有没有开源的冒险岛服务端源码，于是在github上找了找，java版本的很常见了，我以前也玩了会，还是很不错的，可惜很多任务都做不了，想回忆下童年貌似也很困难：（&lt;/p&gt;

&lt;p&gt;还翻到一个c++版本的，随便打开一个文件看了看，有点儿傻眼，这是c++写的？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Vana {
    class PacketReader;

    namespace ChannelServer {
        class WorldServerSession final : public PacketHandler, public enable_shared&amp;lt;WorldServerSession&amp;gt; {
            NONCOPYABLE(WorldServerSession);
        public:
            WorldServerSession() = default;
        protected:
            auto handle(PacketReader &amp;amp;reader) -&amp;gt; Result override;
            auto onConnect() -&amp;gt; void override;
            auto onDisconnect() -&amp;gt; void override;
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有点儿懵逼了，我开始怀疑我究竟会不会c++了。当然我还是有点儿印象的，我只知道auto这个东西貌似是在c++的新标准里引入的，那么-&amp;gt;这个应该也是新标准引入的吧，可是我的第一印象却是lambda表达式，这个和lambda表达式有什么关系呢？&lt;/p&gt;

&lt;h2 id=&#34;lambda表达式:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;Lambda表达式&lt;/h2&gt;

&lt;p&gt;lambda表达式是一个很有用的东西，我在c++外常用lua和golang，这两个都提供闭包支持，在写回调函数的时候非常方便。lambda就是类似于c++的闭包函数，用于在函数内定义匿名回调函数。&lt;/p&gt;

&lt;p&gt;lambda表达式的基本格式为(&amp;lt;&amp;gt;内的为说明 不包含该符号)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;import variables&amp;gt;](&amp;lt;parameters&amp;gt;)-&amp;gt;&amp;lt;return type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;import-variables:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;import variables&lt;/h3&gt;

&lt;p&gt;闭包函数的一个重要特性就是可以获取函数外的变量，在golang和lua中是保持着长久的引用，不会因为函数退出堆栈改变而受到影响。&lt;/p&gt;

&lt;p&gt;c++则不是，引用的变量假如是引用方式引入的，那么当写lambda表达式的函数结束后，那引入的变量已经是有问题的了。&lt;/p&gt;

&lt;p&gt;c++支持值和引用方式传入变量。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当写为[]时，则为不引入任何的变量&lt;/li&gt;
&lt;li&gt;当写为[=]时，通过值复制方式引入所有的外部自动变量(栈上变量)&lt;/li&gt;
&lt;li&gt;当写为[&amp;amp;]时,通过引用方式传入所有的外部自动变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一个特殊的地方就是传入this的引用，按规则是除了[]之外，默认都会传入this的拷贝。&lt;/p&gt;

&lt;p&gt;另外，还可以指定特定变量的引入方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int var = 0;
[var]()-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则为通过值复制的方式引入了外部变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int var = 0;
[&amp;amp;var]()-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则为通过引用方式引入了外部变量。&lt;/p&gt;

&lt;p&gt;引用外部变量，默认情况下是禁止修改外部变量的。可以通过指定mutable关键字来修改外部变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// version 1
int var = 0;
[var]()mutable-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);++var;}();

// version 2
int var = 0;
[&amp;amp;var]()mutable-&amp;gt;void{printf(&amp;quot;%d&amp;quot;, var);++var;}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面两种写法都可以，只是通过传引用方式传入的变量，会在version 2中被修改。&lt;/p&gt;

&lt;h3 id=&#34;parameters:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;parameters&lt;/h3&gt;

&lt;p&gt;这个就没有什么好讲的了，只是指定参数而已，和普通的函数定义没有什么两样。&lt;/p&gt;

&lt;h3 id=&#34;return-type:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;return type&lt;/h3&gt;

&lt;p&gt;这个也没什么好说的，指定返回的类型而已。&lt;/p&gt;

&lt;h3 id=&#34;简化:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;简化&lt;/h3&gt;

&lt;p&gt;当然上面的写法是完整的写法，实际上假设有一些东西没用到，可以简化。比如假设我们没有返回类型，亦或者是希望编译器自己推导返回类型，我们可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[](){printf(&amp;quot;func\n&amp;quot;);}();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functional:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;functional&lt;/h2&gt;

&lt;p&gt;我们可以将lambda表达式赋值给function对象，然后我们可以使用function对象来当做函数指针进行调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;

std::function&amp;lt;int(int, const char*)&amp;gt; func = [](int cnt, const char* pMsg)-&amp;gt;int{for(int i = 0; i &amp;lt; cnt; ++i){printf(&amp;quot;%s\n&amp;quot;, pMsg);}return cnt + 1;};
func(3, &amp;quot;hello function&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单的来说，就是return type(arg type, arg type &amp;hellip;)这样的形式。&lt;/p&gt;

&lt;h2 id=&#34;总结:6f0d350e34b77d0000a23bbb79ffae9e&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;回到开头，开头那个令我懵逼的写法，就是仿照lambda表达式的写法，用auto作为占位符，然后后面则是-&amp;gt; return type。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>偶尔日记160603 前段日子的流水账和昨晚的梦</title>
      <link>http://gocode.cc/blog/2016/06/about-dream-160603/</link>
      <pubDate>Fri, 03 Jun 2016 16:01:14 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/06/about-dream-160603/</guid>
      <description>&lt;p&gt;年后一段日子，貌似因为工作的变动，回家已经很少写代码了，游戏也很久没有更新了。&lt;/p&gt;

&lt;p&gt;昨天闲暇时间完成了一些模块，回家后立刻动手整合上去，以前心心念，而实现又有点儿麻烦的功能算是实现了，感觉离心中的游戏貌似又近了一步吧。可是一个人始终是有心无力，这么多年的代码，有些感觉设计实在是有问题，但是考虑到目前的稳定性（连续运行2个月+），假如更改整体的架构将是一个大动作，而自己精力有限，也就走一步看一步吧。&lt;/p&gt;

&lt;p&gt;现在主要的问题是想要把更新最累的怪物逻辑改为脚本实现，服务端主要是怪物的逻辑，而客户端则是怪物的渲染，其实也是挺麻烦的一件事，但是逻辑迁移到脚本是必须要做的事情。&lt;/p&gt;

&lt;p&gt;这个礼拜貌似也不是特别的忙，基本都鼓捣自己的东西去了，下个礼拜下个迭代开始，估计就有任务了。总体感觉就是，以前在公司，自己负责了服务端N个服务器，而在这里，很多人负责一个中间件，感觉差异挺大的。&lt;/p&gt;

&lt;p&gt;在这里，首先是啃了libevent，然后自己在上面封装了一个库，可以无缝的替换当前服务端的网络模块，期初是因为以前的模块超线程服务器支持有问题，然而上个礼拜研究了半天，发现了问题，于是貌似是可有可无的了，因为假如未来再写什么游戏啊服务器之类的，肯定用golang做网关，后端只需要一个连接而已，iocp epoll之类的就不需要了。&lt;/p&gt;

&lt;p&gt;然后在这里又啃下了iocp模型，以前总是感觉好难，写了一点就放弃了，现在坚持了下来，基本了解了其思想，然后自己写的SIOCPServer也传到了github上了，收货很多。&lt;/p&gt;

&lt;p&gt;其余的，就在研究无锁的ringbuffer，这个稍有了解，再做深入。&lt;/p&gt;

&lt;p&gt;上个礼拜周末还去参加了什么程序员白骨精交友会。怎么说呢，还以为是针对程序员的，然而办的不咋地，中途就走了。&lt;/p&gt;

&lt;p&gt;昨晚做了个梦，居然梦到了她。其实怎么说呢，其实我已经尽量的在脑中不再想，居然还梦到了，估计是潜意识吧，天哪。。。不可能的东西这样是很痛苦的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自己封装的一些golang库</title>
      <link>http://gocode.cc/blog/2016/05/my-golang-package/</link>
      <pubDate>Tue, 31 May 2016 14:43:21 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/my-golang-package/</guid>
      <description>

&lt;p&gt;自己在写go代码的时候，貌似也封装了一些小东西，除了上篇文章的tcp server，还有几个小东西，这段时间也传到了github上了，很简单的小东西。&lt;/p&gt;

&lt;h2 id=&#34;eventdispatcher:14baba0cc5eb318346714515cbf994ba&#34;&gt;eventdispatcher&lt;/h2&gt;

&lt;p&gt;这是一个简单的事件分发器，可以注册自己的事件以及对应的处理函数到上面去，别的地方可以进行回调，典型的观察者模式，可以给代码解耦。&lt;/p&gt;

&lt;h3 id=&#34;install:14baba0cc5eb318346714515cbf994ba&#34;&gt;install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/sryanyuan/eventdispatcher
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用法:14baba0cc5eb318346714515cbf994ba&#34;&gt;用法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/sryanyuan/eventdispatcher&amp;quot;
)

const (
    kEvent_SayHello = iota
)

type SayHelloArg struct {
    times int
}

func sayHello1(data interface{}) {
    arg, ok := data.(*SayHelloArg)
    if !ok {
        return
    }

    for i := 0; i &amp;lt; arg.times; i++ {
        log.Println(&amp;quot;hello1\n&amp;quot;)
    }
}

func sayHello2(data interface{}) {
    arg, ok := data.(*SayHelloArg)
    if !ok {
        return
    }

    for i := 0; i &amp;lt; arg.times; i++ {
        log.Println(&amp;quot;hello2\n&amp;quot;)
    }
}

func main() {
    dip := eventdispatcher.NewEventDispatcher()
    handle1 := dip.AddListener(kEvent_SayHello, sayHello1)
    handle2 := dip.AddListener(kEvent_SayHello, sayHello2)
    arg := SayHelloArg{
        times: 3,
    }
    dip.Dispatch(kEvent_SayHello, &amp;amp;arg)

    //  remove listener
    dip.RemoveListener(handle1)
    dip.RemoveListener(handle2)
    dip.Dispatch(kEvent_SayHello, &amp;amp;arg)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;circle-index-pool:14baba0cc5eb318346714515cbf994ba&#34;&gt;circle index pool&lt;/h2&gt;

&lt;p&gt;这是一个索引的池子，主要用于固定长度数组的索引管理使用。通俗点来讲就是假如你管理了一个最大数量为100的连接，然后你准备了大小为100的数组，然后你就可以为每个连接分配索引了，当索引不够用的时候，就代表了当前的连接数大于了100，就可以做一些处理了。&lt;/p&gt;

&lt;p&gt;为什么需要这个东西呢？这样设计的话，可以让寻址更加的快，不用使用各种map，直接使用数组，当有一个索引的时候，找到这个元素的速度可是比map快不少，在有上限的服务中，这个东西还是很有用的。&lt;/p&gt;

&lt;h3 id=&#34;install-1:14baba0cc5eb318346714515cbf994ba&#34;&gt;install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/sryanyuan/circleindexpool
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用法-1:14baba0cc5eb318346714515cbf994ba&#34;&gt;用法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/sryanyuan/circleindexpool&amp;quot;
)

func main() {
    c := circleindexpool.NewCircleIndexPool(10)

    //  you can get index(1 ~ 10) from the pool
    for {
        i := c.AllocateIndex()
        if i == 0 {
            break
        }

        log.Println(&amp;quot;Got index&amp;quot;, i)
    }

    //  you can free the index and use it later
    for i := 1; i &amp;lt; 10; i += 2 {
        c.FreeIndex(i)
    }

    log.Println(&amp;quot;After free:&amp;quot;)
    for {
        i := c.AllocateIndex()
        if i == 5 {
            break
        }

        log.Println(&amp;quot;Got index&amp;quot;, i)
    }

    //  free all index
    for i := 1; i &amp;lt;= 10; i++ {
        c.FreeIndex(i)
    }

    log.Println(&amp;quot;Total:&amp;quot;)
    for {
        i := c.AllocateIndex()
        if i == 0 {
            break
        }

        log.Println(&amp;quot;Got index&amp;quot;, i)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;luago:14baba0cc5eb318346714515cbf994ba&#34;&gt;luago&lt;/h2&gt;

&lt;p&gt;这是一个go包装的lua引擎，封装的lua版本为lua 5.2.2。其实也没怎么封装，基本导出了lua中所有的c函数，假如熟悉lua的c api，那么使用起来也很方便。&lt;/p&gt;

&lt;p&gt;当然既然要在go中使用，那么导入go函数到lua中也是必要的，我也简单的实现了go中的函数注册到lua的需求。&lt;/p&gt;

&lt;h3 id=&#34;install-2:14baba0cc5eb318346714515cbf994ba&#34;&gt;install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/sryanyuan/luago
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用法-2:14baba0cc5eb318346714515cbf994ba&#34;&gt;用法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;strconv&amp;quot;

    &amp;quot;github.com/sryanyuan/luago&amp;quot;
)

func export(L luago.Lua_Handle) int {
    //  get args from lua
    num := int(luago.Lua_tonumber(L, -2))
    str := luago.Lua_tostring(L, -1)

    //  push value to lua
    val := str + strconv.Itoa(num)
    luago.Lua_pushstring(L, val)
    return 1
}

func main() {
    L := luago.LuaGo_newState()
    L.OpenStdLibs()

    L.LuaGo_PushGoFunction(&amp;quot;export&amp;quot;, export)

    //  invoke
    luago.LuaL_dostring(L.GetHandle(), ` 
        local val = export(1, &amp;quot;hello luago&amp;quot;)
        print(val)
    `)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>用Go写一个简单的TCP server or client 模型</title>
      <link>http://gocode.cc/blog/2016/05/write-a-simple-tcp-server-and-client/</link>
      <pubDate>Fri, 27 May 2016 17:12:51 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/write-a-simple-tcp-server-and-client/</guid>
      <description>

&lt;h2 id=&#34;用go写一个简单的tcp-server-or-client-模型:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;用Go写一个简单的TCP server or client 模型&lt;/h2&gt;

&lt;h3 id=&#34;对conn封装的基本思路:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;对Conn封装的基本思路&lt;/h3&gt;

&lt;p&gt;go内置了net包已经很好的封装了socket通讯。然而在实际使用中，由于net/Conn的Read/Write方法是堵塞的原因，必须将其放入单独的goroutine中进行处理。&lt;/p&gt;

&lt;p&gt;我们先简单的整理下思路，对于连接(Conn)的处理，我们可以开启2条goroutine进行处理，一条用于堵塞的Read的处理，另一条进行Write的处理。&lt;/p&gt;

&lt;p&gt;这里必须指出，其实Write本身就是线程安全的，也就是我们在别的任何地方都可以进行Write，但是Write是堵塞的，所以考虑到这点，我们还是将其放入一个单独的goroutine中进行处理。&lt;/p&gt;

&lt;p&gt;这样设计的原因在于Conn是支持同时Read/Write的，这样我们的基本的Conn的模型就成型了。对于服务端或者客户端而言，我们只需要封装对应过来的Conn即可，Conn的读写goroutine进行处理，并将获得的事件抛向外部。&lt;/p&gt;

&lt;p&gt;那么我们就按这个思路来实现一个简单的Connection封装，该封装支持线程安全的写，并且支持解包操作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package tcpnetwork

import (
    &amp;quot;errors&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net&amp;quot;
    &amp;quot;time&amp;quot;
)

const (
    kConnStatus_None = iota
    kConnStatus_Connected
    kConnStatus_Disconnected
)

const (
    kConnEvent_None = iota
    kConnEvent_Connected
    kConnEvent_Disconnected
    kConnEvent_Data
    kConnEvent_Close
)

const (
    kConnConf_DefaultSendTimeoutSec = 5
    kConnConf_MaxReadBufferLength   = 0xffff // 0xffff
)

type Connection struct {
    conn                net.Conn
    status              int
    connId              int
    sendMsgQueue        chan []byte
    sendTimeoutSec      int
    eventQueue          IEventQueue
    streamProtocol      IStreamProtocol
    maxReadBufferLength int
    userdata            interface{}
    from                int
    readTimeoutSec      int
}

func newConnection(c net.Conn, sendBufferSize int, eq IEventQueue) *Connection {
    return &amp;amp;Connection{
        conn:                c,
        status:              kConnStatus_None,
        connId:              0,
        sendMsgQueue:        make(chan []byte, sendBufferSize),
        sendTimeoutSec:      kConnConf_DefaultSendTimeoutSec,
        maxReadBufferLength: kConnConf_MaxReadBufferLength,
        eventQueue:          eq,
    }
}

type ConnEvent struct {
    EventType int
    Conn      *Connection
    Data      []byte
}

func newConnEvent(et int, c *Connection, d []byte) *ConnEvent {
    return &amp;amp;ConnEvent{
        EventType: et,
        Conn:      c,
        Data:      d,
    }
}

//  directly close, packages in queue will not be sent
func (this *Connection) close() {
    if kConnStatus_Connected != this.status {
        return
    }

    this.conn.Close()
    this.status = kConnStatus_Disconnected
}

func (this *Connection) Close() {
    if this.status != kConnStatus_Connected {
        return
    }

    select {
    case this.sendMsgQueue &amp;lt;- nil:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

func (this *Connection) pushEvent(et int, d []byte) {
    if nil == this.eventQueue {
        log.Println(&amp;quot;Nil event queue&amp;quot;)
        return
    }
    this.eventQueue.Push(newConnEvent(et, this, d))
}

func (this *Connection) GetStatus() int {
    return this.status
}

func (this *Connection) setStatus(stat int) {
    this.status = stat
}

func (this *Connection) GetConnId() int {
    return this.connId
}

func (this *Connection) SetConnId(id int) {
    this.connId = id
}

func (this *Connection) GetUserdata() interface{} {
    return this.userdata
}

func (this *Connection) SetUserdata(ud interface{}) {
    this.userdata = ud
}

func (this *Connection) SetReadTimeoutSec(sec int) {
    this.readTimeoutSec = sec
}

func (this *Connection) GetReadTimeoutSec() int {
    return this.readTimeoutSec
}

func (this *Connection) setStreamProtocol(sp IStreamProtocol) {
    this.streamProtocol = sp
}

func (this *Connection) sendRaw(msg []byte) {
    if this.status != kConnStatus_Connected {
        return
    }

    select {
    case this.sendMsgQueue &amp;lt;- msg:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

func (this *Connection) Send(msg []byte, cpy bool) {
    if this.status != kConnStatus_Connected {
        return
    }

    buf := msg
    if cpy {
        msgCopy := make([]byte, len(msg))
        copy(msgCopy, msg)
        buf = msgCopy
    }

    select {
    case this.sendMsgQueue &amp;lt;- buf:
        {
            //  nothing
        }
    case &amp;lt;-time.After(time.Duration(this.sendTimeoutSec)):
        {
            //  timeout, close the connection
            this.close()
            log.Printf(&amp;quot;Con[%d] send message timeout, close it&amp;quot;, this.connId)
        }
    }
}

//  run a routine to process the connection
func (this *Connection) run() {
    go this.routineMain()
}

func (this *Connection) routineMain() {
    defer func() {
        //  routine end
        log.Printf(&amp;quot;Routine of connection[%d] quit&amp;quot;, this.connId)
        e := recover()
        if e != nil {
            log.Println(&amp;quot;Panic:&amp;quot;, e)
        }

        //  close the connection
        this.close()

        //  free channel
        close(this.sendMsgQueue)
        this.sendMsgQueue = nil

        //  post event
        this.pushEvent(kConnEvent_Disconnected, nil)
    }()

    if nil == this.streamProtocol {
        log.Println(&amp;quot;Nil stream protocol&amp;quot;)
        return
    }
    this.streamProtocol.Init()

    //  connected
    this.pushEvent(kConnEvent_Connected, nil)
    this.status = kConnStatus_Connected

    go this.routineSend()
    this.routineRead()
}

func (this *Connection) routineSend() error {
    defer func() {
        log.Println(&amp;quot;Connection&amp;quot;, this.connId, &amp;quot; send loop return&amp;quot;)
    }()

    for {
        select {
        case evt, ok := &amp;lt;-this.sendMsgQueue:
            {
                if !ok {
                    //  channel closed, quit
                    return nil
                }

                if nil == evt {
                    log.Println(&amp;quot;User disconnect&amp;quot;)
                    this.close()
                    return nil
                }

                var err error

                headerBytes := this.streamProtocol.SerializeHeader(evt)
                if nil != headerBytes {
                    //  write header first
                    _, err = this.conn.Write(headerBytes)
                    if err != nil {
                        log.Println(&amp;quot;Conn write error:&amp;quot;, err)
                        return err
                    }
                }

                _, err = this.conn.Write(evt)
                if err != nil {
                    log.Println(&amp;quot;Conn write error:&amp;quot;, err)
                    return err
                }
            }
        }
    }

    return nil
}

func (this *Connection) routineRead() error {
    //  default buffer
    buf := make([]byte, this.maxReadBufferLength)

    for {
        msg, err := this.unpack(buf)
        if err != nil {
            log.Println(&amp;quot;Conn read error:&amp;quot;, err)
            return err
        }

        this.pushEvent(kConnEvent_Data, msg)
    }

    return nil
}

func (this *Connection) unpack(buf []byte) ([]byte, error) {
    //  read head
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
    }
    headBuf := buf[:this.streamProtocol.GetHeaderLength()]
    _, err := this.conn.Read(headBuf)
    if err != nil {
        return nil, err
    }

    //  check length
    packetLength := this.streamProtocol.UnserializeHeader(headBuf)
    if packetLength &amp;gt; this.maxReadBufferLength ||
        0 == packetLength {
        return nil, errors.New(&amp;quot;The stream data is too long&amp;quot;)
    }

    //  read body
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
    }
    bodyLength := packetLength - this.streamProtocol.GetHeaderLength()
    _, err = this.conn.Read(buf[:bodyLength])
    if err != nil {
        return nil, err
    }

    //  ok
    msg := make([]byte, bodyLength)
    copy(msg, buf[:bodyLength])
    if 0 != this.readTimeoutSec {
        this.conn.SetReadDeadline(time.Time{})
    }

    return msg, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是简单的Conn封装，在抛出事件这部，定义了一个interface来接收事件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package tcpnetwork

type IEventQueue interface {
    Push(*ConnEvent)
    Pop() *ConnEvent
}

type IStreamProtocol interface {
    //  Init
    Init()
    //  get the header length of the stream
    GetHeaderLength() int
    //  read the header length of the stream
    UnserializeHeader([]byte) int
    //  format header
    SerializeHeader([]byte) []byte
}

type IEventHandler interface {
    OnConnected(evt *ConnEvent)
    OnDisconnected(evt *ConnEvent)
    OnRecv(evt *ConnEvent)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们只要在实现对应的方法，就可以接收事件和读取事件了。&lt;/p&gt;

&lt;h3 id=&#34;server-client-端的实现:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Server/Client 端的实现&lt;/h3&gt;

&lt;h4 id=&#34;server:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Server&lt;/h4&gt;

&lt;p&gt;我们已经封装好了Conn，那么接下来的工作将会简单很多。我们来封装一个TCPNetwork的结构。&lt;/p&gt;

&lt;p&gt;对于Server端来说，它基本的步骤就是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;监听端口&lt;/li&gt;
&lt;li&gt;开启accept线程&lt;/li&gt;
&lt;li&gt;得到Conn，并生成Connection，开启Read/Write线程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一步很简单，net包已封装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls, err := net.Listen(&amp;quot;tcp&amp;quot;, addr)
if nil != err {
    return err
}

//  accept
this.listener = ls
go this.acceptRoutine()
return nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在listen成功后，开启了一个goroutine来不断的进行死循环来等待连接的接入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) acceptRoutine() {
    for {
        conn, err := this.listener.Accept()
        if err != nil {
            log.Println(&amp;quot;accept routine quit.error:&amp;quot;, err)
            return
        }

        //  process conn event
        connection := this.createConn(conn)
        connection.SetReadTimeoutSec(this.readTimeoutSec)
        connection.from = 0
        connection.run()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了Connection后，我们只需要让它的处理routine跑起来即可。然而我们需要对应的Connection抛过来的事件，于是我们在TCPNetwork中实现IEventQueue的2个方法，这样我们的TCPNetwork就可以接收对应的事件的抛入，也可以读取，大家读到这里也就知道了，最适合实现这个的就是golang的神器：channel。&lt;/p&gt;

&lt;p&gt;我们来为TCPNetwork定义一个chan *ConnEvent，并实现接口的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) Push(evt *ConnEvent) {
    if nil == this.eventQueue {
        return
    }
    this.eventQueue &amp;lt;- evt
}

func (this *TCPNetwork) Pop() *ConnEvent {
    evt, ok := &amp;lt;-this.eventQueue
    if !ok {
        //  event queue already closed
        this.eventQueue = nil
        return nil
    }

    return evt
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实基本的逻辑已经完成了，对于我们来说，只需要关心eventQueue里的内容就行了，这就属于上层逻辑处理了。这样一个简单的TCPNetwork就封装好了。&lt;/p&gt;

&lt;h4 id=&#34;client:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;Client&lt;/h4&gt;

&lt;p&gt;Client端基本没什么好说的，net包Connect成功后会获得一个Conn，然后对于这个Conn的处理其实和Server端一样了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (this *TCPNetwork) Connect(addr string) error {
    conn, err := net.Dial(&amp;quot;tcp&amp;quot;, addr)
    if nil != err {
        return err
    }

    connection := this.createConn(conn)
    connection.from = 1
    connection.run()

    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;使用方法:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;使用方法&lt;/h4&gt;

&lt;p&gt;对于外部来说，使用很简单，这里贴上一个简单的echo server example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;log&amp;quot;

    &amp;quot;github.com/sryanyuan/tcpnetwork&amp;quot;
)

type TSShutdown struct {
    network *tcpnetwork.TCPNetwork
}

func NewTSShutdown() *TSShutdown {
    t := &amp;amp;TSShutdown{}
    t.network = tcpnetwork.NewTCPNetwork(1024, tcpnetwork.NewStreamProtocol4())
    return t
}

func (this *TSShutdown) OnConnected(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;connected &amp;quot;, evt.Conn.GetConnId())
}

func (this *TSShutdown) OnDisconnected(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;disconnected &amp;quot;, evt.Conn.GetConnId())
}

func (this *TSShutdown) OnRecv(evt *tcpnetwork.ConnEvent) {
    log.Println(&amp;quot;recv &amp;quot;, evt.Conn.GetConnId(), evt.Data)

    evt.Conn.Send(evt.Data, false)
}

func (this *TSShutdown) Run() {
    err := this.network.Listen(&amp;quot;127.0.0.1:2222&amp;quot;)

    if err != nil {
        log.Println(err)
        return
    }

    this.network.ServeWithHandler(this)
    log.Println(&amp;quot;done&amp;quot;)
}


package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
)

func main() {
    defer func() {
        e := recover()
        if e != nil {
            log.Println(e)
        }
        var inp int
        fmt.Scanln(&amp;amp;inp)
    }()
    tsshutdown := NewTSShutdown()
    tsshutdown.Run()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结:71e8a5b95c8db3a43858f37dedc0dbe4&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;我们其实已经实现了一个简单的tcp封装了，支持server/client连接，至于其中心跳的细节、封包解包的细节等等，这里就不多介绍了，可以通过阅读源码来理解。&lt;/p&gt;

&lt;p&gt;该封装可以见我的Github &lt;a href=&#34;https://github.com/sryanyuan/tcpnetwork&#34;&gt;TCPNetwork&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>将__LINE__宏格式化成字符串常量类型</title>
      <link>http://gocode.cc/blog/2016/05/format-__LINE__-to-string-type/</link>
      <pubDate>Fri, 27 May 2016 15:52:05 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/format-__LINE__-to-string-type/</guid>
      <description>

&lt;h2 id=&#34;使用宏的方式来格式化行号:684cd3e999a27e929f0e9a5c076982c3&#34;&gt;使用宏的方式来格式化行号&lt;/h2&gt;

&lt;p&gt;我们已经知道，我们可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__LINE__ 获得当前的行号
__FILE__ 获得当前的文件名
__FUNCTION__ 获得当前的函数名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些在打印日志的时候十分常用，所以在打印日志的时候我们常常需要序列化这些东西，然而序列化这些信息，特别是行号是整型，是有点儿消耗的。&lt;/p&gt;

&lt;p&gt;今天偶然发现了将行号直接格式化成字符串常量的方法，下面贴代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define __LINESTR__ TOSTRING(__LINE__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用这些代码即可将行号格式化成字符串。为了更好的使用，我们可以格式化更加复杂的信息，将文件行号和函数一起格式化成常量。（vc支持，gcc编译器不支持）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define __WHERE__ __FILE__&amp;quot;:&amp;quot;__LINESTR__&amp;quot; &amp;quot;__FILE__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc编译器不支持，因为gcc在拼接字符串的时候，结果必须是已定义的常量，比如文件，行号，字符串常量等，vc没问题。这样日志获得相信文件信息只需要使用上面的宏就可以了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dll链接静态库的坑(LuaSQL fetch崩溃)</title>
      <link>http://gocode.cc/blog/2016/05/lib-and-dll-link-problem/</link>
      <pubDate>Tue, 10 May 2016 19:57:15 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/2016/05/lib-and-dll-link-problem/</guid>
      <description>

&lt;h2 id=&#34;踩到一个大坑:0cf863c2eef47ef400d1b952311cfe50&#34;&gt;踩到一个大坑&lt;/h2&gt;

&lt;p&gt;　这几天在做我们数据中间件的自动化测试工具，我选择了Lua来做testcase的脚本。前一段日子有个需求，就是windows下全部使用静态库，代码生成全部使用/MT，免得依赖VC的运行时库。&lt;/p&gt;

&lt;p&gt;　所以我在开工测试工具的时候，也想这么搞，之前lua的协程调度、唤醒功能也都实现OK了，感觉没啥问题了，于是今天开始嵌入LuaSQL来做SQL的接口，于是问题来了。&lt;/p&gt;

&lt;p&gt;　采用默认的方式编译LuaSQL，当然链接的是Lua的静态库，编译出来的是Lua可以require的Dll。然后基本的使用是没问题的，然而当执行到select语句返回的结果集后，采用内置的cursor:fetch({}, &amp;ldquo;a&amp;rdquo;)就崩了，因为是开源的，所以果断断点调试，发现每次执行lua_rawset就崩了。&lt;/p&gt;

&lt;p&gt;　这是相当奇怪的一个错误，于是我在程序中写了个函数，处理lua传入的table参数，再次执行rawset，毫无问题。但是在LuaSQL模块中，每次操作lua脚本传入的table，执行rawset，必挂。于是我基本一下午都掉进这个坑里了。&lt;/p&gt;

&lt;p&gt;　网上貌似也有遇到这个情况的，但是他绕过了，采用了fetch()传空参数的方法来返回每列的结果。这没有从根本上解决问题，于是发现每次执行到某个指针变量和某个全局的静态变量比较的时候，比较出了问题，于是下面的逻辑就乱了，也就崩溃了。&lt;/p&gt;

&lt;p&gt;　一个劲儿的调试也不是出路。于是仔细思考了下，突然发现程序是静态链接的lua，而luasql也是静态链接的lua，而exe模块和dll模块最大的忌讳就是共享全局变量！因为exe中会有一份静态链接库的代码导入，而dll也会有，这就造成了exe和dll都有一份代码拷贝，而在exe中执行的lua函数均是exe模块里面的，而dll中则是dll模块中的lua模块，然而我exe中执行的脚本生成的table，放到了dll模块中的lua模块进行操作，很有可能会出现问题。&lt;/p&gt;

&lt;p&gt;　所以必须记住，对于dll和exe共享的模块，尽量动态链接，这样exe和dll执行后都会引用到对应的dll模块，不会产生多份代码拷贝，因为dll载入后有自己的内存空间等，和exe模块其实不属于一个模块。同时还有个题外话，就是dll中malloc/new出来的指针，必须在dll中导出对应的函数进行free/delete，这也是exe和dll中c库在执行释放操作的时候，由于模块不同，会导致无法释放对应指针，当然假如使用的是/MD选项的话，则不存在这个问题。&lt;/p&gt;

&lt;p&gt;　有朋友总结了一句话&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;一个模块一个堆，一个线程一个栈。
dll里malloc的内存，在exe里free会出错。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　总之，上述的问题，也是不同模块不同的代码副本造成的，不同模块引用了不同的全局变量，当然会出错啦。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在这儿的第一篇博文，安家啦</title>
      <link>http://gocode.cc/blog/my-first-blog/</link>
      <pubDate>Sun, 08 May 2016 11:19:31 +0800</pubDate>
      
      <guid>http://gocode.cc/blog/my-first-blog/</guid>
      <description>&lt;p&gt;终于差不多搭好了，真是曲折。
首先自己想做一个博客，但是无奈前端知识有限，用Go写了会，放弃了。后来发现Openresty这个东西，用Lua写着貌似更加爽，可是貌似比Go还麻烦，于是又放弃了。&lt;/p&gt;

&lt;p&gt;后来仔细想想，一个静态的博客就够了，于是找到了Gor这个生成器，搭了一个简单的网站，方便是方便，可是主题有限，感觉不好看。&lt;/p&gt;

&lt;p&gt;其余主流的还要装Ruby之类的，感觉还是有点儿麻烦，于是还是准备找Go的静态博客生成器，于是发现了Hogo。&lt;/p&gt;

&lt;p&gt;于是这个页面就是找了个主题改改用Hugo生成的，感觉还不错。
那么我就在这里安家啦。&lt;/p&gt;

&lt;p&gt;还顺手买了个域名，gocode.cc，cc域名便宜呀！5年才花了100块钱 ：）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>